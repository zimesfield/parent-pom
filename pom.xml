<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.zimesfield</groupId>
	<artifactId>parent</artifactId>
	<version>2.0.2-SNAPSHOT</version>
<!--	<version>${revision}</version>-->

	<name>parent-pom</name>
	<description>zimesfield parent pom</description>


	<packaging>pom</packaging>

	<developers>
		<developer>
			<name>Cyprian Omenuko</name>
			<email>comenuko@zimesfield.com</email>
			<organization>Zimesfield Limited</organization>
			<organizationUrl>https://www.zimesfield.com</organizationUrl>
		</developer>
	</developers>
	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<connection>scm:git:git://github.com/zimesfield/commons.git</connection>
		<developerConnection>scm:git:ssh://github.com:zimesfield/commons.git</developerConnection>
		<url>http://github.com/zimesfield/commons/tree/main</url>

	</scm>

	<properties>
		<!--
            Build properties
            The spring-boot version should match the one managed by https://mvnrepository.com/artifact/tech.jhipster/jhipster-dependencies/${jhipster-dependencies.version}
        -->
		<start-class/>
		<base-test/>
		<api-input-spec/>
		<api-package/>
		<api-model-package/>

		<maven.version>3.2.5</maven.version>
		<java.version>17</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<argLine>-Djava.security.egd=file:/dev/./urandom -Xmx1G</argLine>
		<m2e.apt.activation>jdt_apt</m2e.apt.activation>
		<run.addResources>false</run.addResources>
		<spring-boot.version>${project.parent.version}</spring-boot.version>
		<archunit-junit5.version>1.3.0</archunit-junit5.version>
		<checkstyle.version>10.17.0</checkstyle.version>
		<git-commit-id-maven-plugin.version>9.0.1</git-commit-id-maven-plugin.version>
		<hazelcast-hibernate53.version>5.1.0</hazelcast-hibernate53.version>
		<hazelcast-spring.version>5.4.0</hazelcast-spring.version>
		<jackson-databind-nullable.version>0.2.6</jackson-databind-nullable.version>
		<jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>
		<jhipster-framework.version>8.6.0</jhipster-framework.version>
		<jib-maven-plugin.architecture>amd64</jib-maven-plugin.architecture>
		<jib-maven-plugin.image>eclipse-temurin:17-jre-focal</jib-maven-plugin.image>
		<jib-maven-plugin.version>3.4.3</jib-maven-plugin.version>
		<lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
		<liquibase-plugin.driver/>
		<liquibase-plugin.hibernate-dialect/>
		<liquibase-plugin.password/>
		<liquibase-plugin.url/>
		<liquibase-plugin.username/>
		<mapstruct.version>1.5.5.Final</mapstruct.version>
		<zolando-problem.version>0.27.1</zolando-problem.version>
		<maven-checkstyle-plugin.version>3.4.0</maven-checkstyle-plugin.version>
		<maven-clean-plugin.version>3.4.0</maven-clean-plugin.version>
		<maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
		<maven-enforcer-plugin.version>3.5.0</maven-enforcer-plugin.version>
		<maven-failsafe-plugin.version>3.3.0</maven-failsafe-plugin.version>
		<maven-jar-plugin.version>3.4.2</maven-jar-plugin.version>
		<maven-javadoc-plugin.version>3.7.0</maven-javadoc-plugin.version>
		<maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
		<maven-site-plugin.version>3.12.1</maven-site-plugin.version>
		<maven-surefire-plugin.version>3.3.0</maven-surefire-plugin.version>
		<maven-war-plugin.version>3.4.0</maven-war-plugin.version>
		<modernizer-maven-plugin.version>2.9.0</modernizer-maven-plugin.version>
		<nohttp-checkstyle.version>0.0.11</nohttp-checkstyle.version>
		<openapi-generator-maven-plugin.version>7.6.0</openapi-generator-maven-plugin.version>
		<profile.api-docs/>
		<profile.e2e/>
		<profile.no-liquibase/>
		<profile.test/>
		<profile.tls/>
		<properties-maven-plugin.version>1.2.1</properties-maven-plugin.version>
		<properties-maven-exec.version>3.4.1</properties-maven-exec.version>
		<sonar-maven-plugin.version>4.0.0.4121</sonar-maven-plugin.version>
		<spotless-maven-plugin.version>2.43.0</spotless-maven-plugin.version>
		<spring-cloud-dependencies.version>2023.0.2</spring-cloud-dependencies.version>
		<springdoc-openapi-starter-webmvc-api.version>2.5.0</springdoc-openapi-starter-webmvc-api.version>
	</properties>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>tech.jhipster</groupId>
				<artifactId>jhipster-dependencies</artifactId>
				<version>${jhipster-framework.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.hazelcast</groupId>
				<artifactId>hazelcast-hibernate53</artifactId>
				<version>${hazelcast-hibernate53.version}</version>
			</dependency>
			<dependency>
				<groupId>com.tngtech.archunit</groupId>
				<artifactId>archunit-junit5-api</artifactId>
				<version>${archunit-junit5.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- Adding the engine dependency to the surefire-plugin unfortunately does not work in the current version. -->
				<!-- https://www.archunit.org/userguide/html/000_Index.html#_junit_5 -->
				<groupId>com.tngtech.archunit</groupId>
				<artifactId>archunit-junit5-engine</artifactId>
				<version>${archunit-junit5.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.openapitools</groupId>
				<artifactId>jackson-databind-nullable</artifactId>
				<version>${jackson-databind-nullable.version}</version>
			</dependency>
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.zalando/problem -->
			<dependency>
				<groupId>org.zalando</groupId>
				<artifactId>problem</artifactId>
				<version>${zolando-problem.version}</version>
			</dependency>

			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct</artifactId>
				<version>${mapstruct.version}</version>
			</dependency>
			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct-processor</artifactId>
				<version>${mapstruct.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${properties-maven-exec.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<mainClass>${start-class}</mainClass>
						<!--
                        Enable the line below to have remote debugging of your application on port 5005
                        <jvmArguments>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</jvmArguments>
                        -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.diffplug.spotless</groupId>
					<artifactId>spotless-maven-plugin</artifactId>
					<version>${spotless-maven-plugin.version}</version>
					<configuration>
						<java>
							<!-- <removeUnusedImports/> -->
						</java>
					</configuration>
					<executions>
						<execution>
							<id>spotless</id>
							<phase>process-sources</phase>
							<goals>
								<goal>apply</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>com.google.cloud.tools</groupId>
					<artifactId>jib-maven-plugin</artifactId>
					<version>${jib-maven-plugin.version}</version>
					<configuration>
						<from>
							<image>${jib-maven-plugin.image}</image>
							<platforms>
								<platform>
									<architecture>${jib-maven-plugin.architecture}</architecture>
									<os>linux</os>
								</platform>
							</platforms>
						</from>
						<to>
							<image>delivery:latest</image>
						</to>
						<container>
							<entrypoint>
								<shell>bash</shell>
								<option>-c</option>
								<arg>/entrypoint.sh</arg>
							</entrypoint>
							<ports>
								<port>8082</port>
								<port>5701/udp</port>
							</ports>
							<environment>
								<SPRING_OUTPUT_ANSI_ENABLED>ALWAYS</SPRING_OUTPUT_ANSI_ENABLED>
								<JHIPSTER_SLEEP>0</JHIPSTER_SLEEP>
							</environment>
							<creationTime>USE_CURRENT_TIMESTAMP</creationTime>
							<user>1000</user>
						</container>
						<extraDirectories>
							<paths>src/main/docker/jib</paths>
							<permissions>
								<permission>
									<file>/entrypoint.sh</file>
									<mode>755</mode>
								</permission>
							</permissions>
						</extraDirectories>
					</configuration>
				</plugin>
				<plugin>
					<groupId>io.github.git-commit-id</groupId>
					<artifactId>git-commit-id-maven-plugin</artifactId>
					<version>${git-commit-id-maven-plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>revision</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<failOnNoGitDirectory>false</failOnNoGitDirectory>
						<failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
						<generateGitPropertiesFile>true</generateGitPropertiesFile>
						<includeOnlyProperties>
							<includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
							<includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
							<includeOnlyProperty>^git.branch$</includeOnlyProperty>
						</includeOnlyProperties>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${maven-checkstyle-plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>com.puppycrawl.tools</groupId>
							<artifactId>checkstyle</artifactId>
							<version>${checkstyle.version}</version>
						</dependency>
						<dependency>
							<groupId>io.spring.nohttp</groupId>
							<artifactId>nohttp-checkstyle</artifactId>
							<version>${nohttp-checkstyle.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<configLocation>checkstyle.xml</configLocation>
						<includes>pom.xml,README.md</includes>
						<excludes>.git/**/*,target/**/*,node_modules/**/*</excludes>
						<sourceDirectories>./</sourceDirectories>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-configuration-processor</artifactId>
							<version>3.3.1</version>
						</dependency>
					</dependencies>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<parameters>true</parameters>
						<annotationProcessorPaths>
							<path>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-configuration-processor</artifactId>
							</path>
							<path>
								<groupId>org.projectlombok</groupId>
								<artifactId>lombok</artifactId>
								<version>${lombok.version}</version>
							</path>
							<path>
								<groupId>org.mapstruct</groupId>
								<artifactId>mapstruct-processor</artifactId>
								<version>${mapstruct.version}</version>
							</path>
							<path>
								<groupId>org.hibernate.orm</groupId>
								<artifactId>hibernate-jpamodelgen</artifactId>
							</path>
							<path>
								<groupId>org.glassfish.jaxb</groupId>
								<artifactId>jaxb-runtime</artifactId>
							</path>
						</annotationProcessorPaths>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>enforce-versions</id>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
						<execution>
							<id>enforce-dependencyConvergence</id>
							<configuration>
								<rules>
									<DependencyConvergence/>
								</rules>
								<fail>false</fail>
							</configuration>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<rules>
							<requireMavenVersion>
								<message>You are running an older version of Maven. JHipster requires at least Maven ${maven.version}</message>
								<version>[${maven.version},)</version>
							</requireMavenVersion>
							<requireJavaVersion>
								<message>You are running an incompatible version of Java. JHipster supports JDK 17 to 22.</message>
								<version>[17,18),[18,19),[19,20),[20,21),[21,22),[22,23)</version>
							</requireJavaVersion>
						</rules>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${maven-failsafe-plugin.version}</version>
					<configuration>
						<!-- Due to spring-boot repackage, without adding this property test classes are not found
                             See https://github.com/spring-projects/spring-boot/issues/6254 -->
						<!-- Force alphabetical order to have a reproducible build -->
						<classesDirectory>${project.build.outputDirectory}</classesDirectory>
						<runOrder>alphabetical</runOrder>
						<includes>
							<include>**/*IT*</include>
							<include>**/*IntTest*</include>
						</includes>
						<argLine>@{argLine} -Dspring.profiles.active=${profile.test}</argLine>
					</configuration>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify</id>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<source>${maven.compiler.source}</source>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>${maven-site-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<excludes>
							<exclude>**/*IT*</exclude>
							<exclude>**/*IntTest*</exclude>
						</excludes>
						<systemPropertyVariables>
							<java.util.logging.config.file>src/test/resources/logback.xml</java.util.logging.config.file>
						</systemPropertyVariables>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>${maven-war-plugin.version}</version>
					<executions>
						<execution>
							<id>default-war</id>
							<goals>
								<goal>war</goal>
							</goals>
							<phase>package</phase>
						</execution>
					</executions>
					<configuration>
						<warSourceIncludes>WEB-INF/**,META-INF/**</warSourceIncludes>
						<failOnMissingWebXml>false</failOnMissingWebXml>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>${properties-maven-plugin.version}</version>
					<executions>
						<execution>
							<phase>initialize</phase>
							<goals>
								<goal>read-project-properties</goal>
							</goals>
							<configuration>
								<files>
									<file>sonar-project.properties</file>
								</files>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.gaul</groupId>
					<artifactId>modernizer-maven-plugin</artifactId>
					<version>${modernizer-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>modernizer</id>
							<phase>package</phase>
							<goals>
								<goal>modernizer</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<javaVersion>${java.version}</javaVersion>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>pre-unit-tests</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
							<id>post-unit-test</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
						<execution>
							<id>pre-integration-tests</id>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
						</execution>
						<execution>
							<!-- Ensures that the code coverage report for integration tests is created after integration tests have been run -->
							<id>post-integration-tests</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>report-integration</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.liquibase</groupId>
					<artifactId>liquibase-maven-plugin</artifactId>
					<version>${liquibase.version}</version>
					<configuration>
						<changeLogFile>config/liquibase/master.xml</changeLogFile>
						<diffChangeLogFile>${project.basedir}/src/main/resources/config/liquibase/changelog/${maven.build.timestamp}_changelog.xml</diffChangeLogFile>
						<driver>${liquibase-plugin.driver}</driver>
						<url>${liquibase-plugin.url}</url>
						<defaultSchemaName/>
						<username>${liquibase-plugin.username}</username>
						<password>${liquibase-plugin.password}</password>
						<referenceUrl>hibernate:spring:com.zimesfield.delivery.domain?dialect=${liquibase-plugin.hibernate-dialect}&amp;hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy&amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</referenceUrl>
						<verbose>true</verbose>
						<logging>debug</logging>
						<contexts>!test</contexts>
						<diffExcludeObjects>oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token</diffExcludeObjects>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.liquibase</groupId>
							<artifactId>liquibase-core</artifactId>
							<version>${liquibase.version}</version>
						</dependency>
						<dependency>
							<groupId>org.liquibase.ext</groupId>
							<artifactId>liquibase-hibernate6</artifactId>
							<version>${liquibase.version}</version>
						</dependency>
						<dependency>
							<groupId>jakarta.validation</groupId>
							<artifactId>jakarta.validation-api</artifactId>
							<version>${jakarta-validation.version}</version>
						</dependency>
						<dependency>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-starter-data-jpa</artifactId>
							<version>${spring-boot.version}</version>
						</dependency>
						<dependency>
							<groupId>com.h2database</groupId>
							<artifactId>h2</artifactId>
							<version>${h2.version}</version>
						</dependency>
					</dependencies>
				</plugin>
<!--				<plugin>-->
<!--					<groupId>org.codehaus.mojo</groupId>-->
<!--					<artifactId>exec-maven-plugin</artifactId>-->
<!--					<version>${properties-maven-exec.version}</version>-->
<!--					<executions>-->
<!--						<execution>-->
<!--							<id>fetch-openapi-spec</id>-->
<!--							<phase>generate-sources</phase>-->
<!--							<goals>-->
<!--								<goal>exec</goal>-->
<!--							</goals>-->
<!--							<configuration>-->
<!--								<executable>curl</executable>-->
<!--								<arguments>-->
<!--									<argument>${api-input-spec}</argument>-->
<!--									<argument>-o</argument>-->
<!--									<argument>src/main/resources/swagger/openapi.yaml</argument>-->
<!--								</arguments>-->
<!--							</configuration>-->
<!--						</execution>-->
<!--					</executions>-->
<!--				</plugin>-->
				<plugin>
					<!--
                        Plugin that provides API-first development using openapi-generator-cli to
                        generate Spring-MVC endpoint stubs at compile time from an OpenAPI definition file
                    -->
					<groupId>org.openapitools</groupId>
					<artifactId>openapi-generator-maven-plugin</artifactId>
					<version>${openapi-generator-maven-plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>generate</goal>
							</goals>
							<configuration>
								<inputSpec>src/main/resources/swagger/openapi.yaml</inputSpec>
								<generatorName>spring</generatorName>
								<apiPackage>${api-package}</apiPackage>
								<modelPackage>${api-model-package}</modelPackage>
								<supportingFilesToGenerate>ApiUtil.java</supportingFilesToGenerate>
								<skipValidateSpec>false</skipValidateSpec>
								<configOptions>
									<delegatePattern>true</delegatePattern>
									<title>delivery</title>
									<useSpringBoot3>true</useSpringBoot3>
								</configOptions>
								<typeMappings>
									<typeMapping>Double=java.math.BigDecimal</typeMapping>
									<typeMapping>Pageable=org.springframework.data.domain.Pageable</typeMapping>
									<typeMapping>PageRequest=org.springframework.data.domain.PageRequest</typeMapping>
									<typeMapping>PageResponse=org.springframework.data.domain.Pageable</typeMapping>
									<typeMapping>Page=org.springframework.data.domain.Page</typeMapping>
								</typeMappings>
								<importMappings>
									<importMapping>Problem=org.zalando.problem.Problem</importMapping>
									<importMapping>Pageable=org.springframework.data.domain.Pageable</importMapping>
									<importMapping>PageRequest=org.springframework.data.domain.PageRequest</importMapping>
								</importMappings>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar-maven-plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>api-docs</id>
			<properties>
				<profile.api-docs>,api-docs</profile.api-docs>
			</properties>
		</profile>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>dev${profile.tls}${profile.no-liquibase}</spring.profiles.active>
				<profile.test>testdev</profile.test>
				<liquibase-plugin.hibernate-dialect>org.hibernate.dialect.H2Dialect</liquibase-plugin.hibernate-dialect>
				<liquibase-plugin.driver>org.h2.Driver</liquibase-plugin.driver>
				<liquibase-plugin.url>jdbc:h2:file:${project.build.directory}/h2db/db/delivery</liquibase-plugin.url>
				<liquibase-plugin.username>booking</liquibase-plugin.username>
				<liquibase-plugin.password/>
			</properties>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-devtools</artifactId>
					<optional>true</optional>
				</dependency>
				<dependency>
					<groupId>com.h2database</groupId>
					<artifactId>h2</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<configuration>
							<testExcludes>
								<testExclude>com/zimesfield/booking/config/PostgreSqlTestContainer.java</testExclude>
							</testExcludes>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>1.6.13</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>ossrh</serverId>
							<nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
							<autoReleaseAfterClose>true</autoReleaseAfterClose>
							<stagingProfileId>50a9964b73a11d</stagingProfileId>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>no-liquibase</id>
			<properties>
				<profile.no-liquibase>,no-liquibase</profile.no-liquibase>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>prod${profile.api-docs}${profile.tls}${profile.e2e}${profile.no-liquibase}</spring.profiles.active>
				<profile.test>testprod</profile.test>
				<liquibase-plugin.hibernate-dialect>org.hibernate.dialect.PostgreSQLDialect</liquibase-plugin.hibernate-dialect>
				<liquibase-plugin.driver>org.postgresql.Driver</liquibase-plugin.driver>
				<liquibase-plugin.url>jdbc:postgresql://localhost:5432/booking</liquibase-plugin.url>
				<liquibase-plugin.username>booking</liquibase-plugin.username>
				<liquibase-plugin.password/>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<configuration>
							<filesets>
								<fileset>
									<directory>target/classes/static/</directory>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>build-info</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.github.git-commit-id</groupId>
						<artifactId>git-commit-id-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.postgresql</groupId>
					<artifactId>postgresql</artifactId>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>tls</id>
			<properties>
				<profile.tls>,tls</profile.tls>
			</properties>
		</profile>
		<profile>
			<id>coverage</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-maven-plugin.version}</version>
						<executions>
							<!-- Prepares the property pointing to the JaCoCo runtime agent
                            which is passed as VM argument when Maven the Surefire plugin is executed. -->
							<execution>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<!-- Ensures that the code coverage report is created after
                            all tests have been run. -->
							<execution>
								<id>generate-report</id>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
							<execution>
								<id>jacoco-check</id>
								<goals>
									<goal>check</goal>
								</goals>
								<configuration>
									<rules>
										<rule>
											<element>PACKAGE</element>
											<limits>
												<limit>
													<counter>LINE</counter>
													<value>COVEREDRATIO</value>
													<minimum>0.00</minimum>
												</limit>
											</limits>
										</rule>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>3.7.0</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
<!--					<plugin>-->
<!--						<groupId>org.apache.maven.plugins</groupId>-->
<!--						<artifactId>maven-gpg-plugin</artifactId>-->
<!--						<version>3.2.3</version>-->
<!--						<executions>-->
<!--							<execution>-->
<!--								<id>sign-artifacts</id>-->
<!--								<phase>verify</phase>-->
<!--								<goals>-->
<!--									<goal>sign</goal>-->
<!--								</goals>-->
<!--							</execution>-->
<!--						</executions>-->
<!--					</plugin>-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>3.2.3</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<!-- Prevent gpg from using pinentry programs -->
							<gpgArguments>
								<arg>--pinentry-mode</arg>
								<arg>loopback</arg>
							</gpgArguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>
</project>
